"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const settings = require("./settings");
const plugins = require("./plugins");
exports.plugins = plugins;
const parse = require("./parse");
exports.parse = parse;
const build_1 = require("./build");
const pubsub_1 = require("./pubsub");
const controllers_1 = require("./controllers");
require("./customizations");
const nconf = require.main.require('nconf');
const buster = require.main.require('./src/meta').config['cache-buster'];
const init = async (params) => {
    controllers_1.default(params);
    const sets = await settings.get();
    const { parseAscii, parseNative } = sets;
    // initialize parser flags
    parse.setOptions({
        ascii: parseAscii,
        native: parseNative,
    });
    // always build on startup if in dev mode
    const shouldBuild = nconf.any('build_emoji', 'BUILD_EMOJI') ||
        // otherwise, build if never built before
        fs_extra_1.access(build_1.tableFile).catch((err) => {
            if (err && err.code !== 'ENOENT') {
                throw err;
            }
            return false;
        });
    if (shouldBuild) {
        await pubsub_1.build();
    }
};
exports.init = init;
const adminMenu = (header, callback) => {
    header.plugins.push({
        route: '/plugins/emoji',
        icon: 'fa-smile-o',
        name: 'Emoji',
    });
    callback(null, header);
};
exports.adminMenu = adminMenu;
const composerFormatting = (data, callback) => {
    data.options.push({
        name: 'emoji-add-emoji',
        className: 'fa fa-smile-o emoji-add-emoji',
        title: '[[emoji:composer.title]]',
    });
    callback(null, data);
};
exports.composerFormatting = composerFormatting;
const addStylesheet = (data, callback) => {
    const rel = nconf.get('relative_path');
    data.links.push({
        rel: 'stylesheet',
        href: `${rel}/plugins/nodebb-plugin-emoji/emoji/styles.css?${buster}`,
    });
    callback(null, data);
};
exports.addStylesheet = addStylesheet;
const configGet = async (config) => {
    const customFirst = await settings.getOne('customFirst');
    // eslint-disable-next-line no-param-reassign
    config.emojiCustomFirst = customFirst;
    return config;
};
exports.configGet = configGet;
//# sourceMappingURL=index.js.map